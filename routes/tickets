// backend/routes/tickets.js
const express = require('express');
const router = express.Router();
const Ticket = require('../models/Ticket');
const QRCode = require('qrcode');

router.get('/:transactionReference', async (req, res) => {
  try {
    const { transactionReference } = req.params;
    console.log('Backend request for:', transactionReference);

    const ticket = await Ticket.findOne({ transactionReference });
    if (!ticket) {
      return res.status(404).json({ error: 'Ticket not found' });
    }

    const qrCodeData = JSON.stringify({ ticketId: ticket.ticketId });
    const qrCodeUrl = await QRCode.toDataURL(qrCodeData);

    res.json({
      ticketId: ticket.ticketId,
      eventTitle: ticket.eventTitle,
      qrCode: qrCodeUrl,
      transactionReference: ticket.transactionReference,
      status: ticket.status,
    });
  } catch (err) {
    console.error('Error fetching ticket:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

router.post('/', async (req, res) => {
  try {
    const {
      ticketId,
      eventId,
      eventTitle,
      firstName,
      lastName,
      email,
      isGift,
      recipientFirstName,
      recipientLastName,
      recipientEmail,
    } = req.body;

    // Generate unique transactionReference
    const transactionReference = `TICKET-${Math.floor(100000 + Math.random() * 900000)}-${Date.now()}`;

    const ticketData = {
      ticketId: ticketId || `TICKET-${Date.now()}`, // Fallback if ticketId not provided
      transactionReference,
      eventId,
      eventTitle,
      ticketHolder: {
        firstName,
        lastName,
        email,
      },
      isGift: !!isGift,
      recipient: isGift
        ? {
            firstName: recipientFirstName,
            lastName: recipientLastName,
            email: recipientEmail,
          }
        : undefined,
      status: 'unused',
    };

    const ticket = new Ticket(ticketData);
    await ticket.save();

    res.status(201).json({
      ticketId: ticket.ticketId,
      transactionReference: ticket.transactionReference,
      eventTitle: ticket.eventTitle,
    });
  } catch (err) {
    console.error('Error creating ticket:', err);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;
